apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'distribution'
apply plugin: 'idea'

version = '0.2'

configurations {
    provided
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.bootClasspath = "$JDK_HOME/jre/lib/rt.jar"

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntime  + configurations.provided
        runtimeClasspath += main.output + test.output + configurations.provided
        java {
            srcDir file('src/integration-test/java')
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

repositories {
    maven {
        url "https://dl.bintray.com/miurahr/maven/"
    }
    jcenter()
}

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.json:json:20160810'
    provided 'org.omegat.gradle:gradle-omegat-plugin:0.9.0'
    provided 'commons-io:commons-io:2.4'
    provided 'commons-lang:commons-lang:2.6'
    testCompile 'org.testng:testng:6.9.10'
}
test.useTestNG()

jar {
    from files(sourceSets.main.output.classesDir)
    from {configurations.compile.collect {zipTree(it)}} {
        exclude "META-INF/MANIFEST.MF"
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.textra.OmegatTextraMachineTranslation")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    toolVersion = '7.1'
}

// Force prevent checkstyle/findbugs on Test.
task checkstyleTest(overwrite: true) << {}
task findbugsTest(overwrite: true) << {}

findbugs {
    ignoreFailures = true
}
tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
    setGroup('Verification')
}

jacocoTestReport {
    group 'Documentation'
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/testReport"
    }
}

task integrationTest(type: Test) {
    description = "Runs integration and acceptance tests."
    group = 'Verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("$buildDir/reports/integrationTests")
    useTestNG()
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    group 'Documentation'
    sourceSets sourceSets.main
    executionData integrationTest
    reports.html.destination "${buildDir}/reports/jacoco/integrationTestReport"
}

check.dependsOn integrationTest
check.finalizedBy jacocoTestReport
integrationTest.mustRunAfter test

task jacocoCombinedTestReport(type: JacocoReport) {
    group 'Documentation'
    sourceSets sourceSets.main
    executionData test, integrationTest
    reports.html.destination "${buildDir}/reports/jacoco/combinedTestReport"
}
integrationTest.finalizedBy (jacocoIntegrationTestReport, jacocoCombinedTestReport)

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/groovy')
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

javadoc {
    classpath += configurations.provided
    options.locale = 'en_US'
}

artifacts {
    archives jar
    archives sourceJar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from('README.md', 'CHANGELOG.md', 'COPYING', 'DEVELOP.md')
            from(sourceJar) {
                into 'source'
            }
            from(jar) {
                into 'plugin'
            }
        }
    }
}

